{"debug_symbols":[{"locations":{"0":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":529,"end":555},"file":28},{"span":{"start":122,"end":149},"file":18}],"1":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":529,"end":555},"file":28},{"span":{"start":122,"end":149},"file":18}],"2":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":529,"end":555},"file":28},{"span":{"start":122,"end":149},"file":18}],"3":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":529,"end":555},"file":28},{"span":{"start":122,"end":149},"file":18}],"4":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":529,"end":555},"file":28},{"span":{"start":122,"end":149},"file":18}],"5":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":529,"end":555},"file":28},{"span":{"start":122,"end":149},"file":18}],"6":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":716,"end":728},"file":28}],"7":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"8":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"9":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"10":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"11":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"12":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"13":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"14":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":716,"end":728},"file":28}],"15":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"16":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"17":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"18":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"19":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"20":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"21":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"22":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":716,"end":728},"file":28}],"23":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"24":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"25":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"26":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"27":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"28":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"29":[{"span":{"start":932,"end":988},"file":0},{"span":{"start":821,"end":872},"file":28},{"span":{"start":755,"end":793},"file":26}],"30":[{"span":{"start":1003,"end":1023},"file":0}]}}],"file_map":{"0":{"source":"use dep::std::ecdsa_secp256k1::verify_signature;\nuse dep::std;\nuse dep::std::scalar_mul;\nuse dep::std::hash;\n// use dep::ecrecover;\n\n\nfn split_address_credit_score(\n    leaf_array: [u8; 65]\n) -> ([u8; 24], [u8; 40]) {\n    let mut credit_score: [u8; 24] = [0; 24];\n    let mut address: [u8; 40] = [0; 40];\n\n    for i in 0..24 {\n        credit_score[i] = leaf_array[i + 1]; \n    }\n\n    for i in 0..40 {\n        address[i] = leaf_array[i + 25]; // Skip \"0x\" prefix and credit score\n    }\n\n\n    // for i in 0..25 {\n    //     credit_score[i] = leaf_array[i + 1];\n    // };\n\n    // for i in 25..64 {\n    //     address[i] = leaf_array[i + 1];\n    // };\n    (credit_score, address)\n}\n\n\nfn main(\n  index: Field,\n  leaf: Field,\n  root: pub Field,\n  // pub_key_x: [u8; 32],\n  // pub_key_y: [u8; 32],\n  // qualification: pub Field,\n  hash_path: [Field; 3]\n) {\n\n    \n\n    // Check if the leaf is part of the merkle tree\n    let computedRoot = std::merkle::compute_merkle_root(leaf, index, hash_path);\n\n    assert (root == computedRoot);\n}\n\n// let given_key = ecrecover::secp256k1::PubKey::from_xy(pub_key_x, pub_key_y);\n    // let _given_address = given_key.to_eth_address();\n    // Convert the leaf Field to a hexadecimal string\n    //let leaf_hex = leaf.to_hex();\n\n    // let leaf_array = leaf.to_le_bytes(64);\n    // let leaf_array_sl = leaf_array.as_slice();\n    // let (_credit_score, _address) = split_address_credit_score(leaf_array_sl);\n    // // address_field = ecrecover::secp256k1::PubKey::from_unified(address);\n    // assert (given_address == address);\n    // // let last_5_elements = leaf_array_sl(leaf_array_sl.len() - 5..);\n    // let address = leaf_array_sl[40..64];\n    //  let first = leaf_array[0];\n    // let second = leaf_array[1];   // // Extract the address from the leaf value\n    // // let address = leaf_array[24..];\n\n    // let deded = pub_key_y.[3..]\n\n    // let leaf_as_field = leaf.map(|x : u8| x as Field);\n\n    // let last_40_elements = &leaf[24..];\n\n    // let address_hex = leaf.26..64; // Address starts from character 26 to the end\n\n    // // Extract the credit score from the leaf value\n    // let credit_score_hex = leaf[2 ; 26]; // Credit score occupies characters 2 to 25\n\n    // // Convert the address from hexadecimal to a string\n    // let address = hex::decode(address_hex).unwrap();\n    // let address_str = String::from_utf8(address).unwrap();\n\n    // // Convert the credit score from hexadecimal to an integer\n    // let credit_score = u64::from_str_radix(credit_score_hex, 16).unwrap();\n    \n    // First let's check that the calification is true\n    // let credit_score = 900;\n    // let expected_qualification = if credit_score >= 800 {\n    //     2\n    // } else if credit_score >= 500 {\n    //     1\n    // } else {\n    //     0\n    // };\n\n    // // assert (expected_qualification == qualification);\n    ","path":"/workspace/circuit/src/main.nr"},"18":{"source":"impl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x âˆˆ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n","path":"std/field.nr"},"26":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input: [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input: [u8; N]) -> [u8; 32] {}\n\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint {\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(_input: [Field; N], _separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\npub fn pedersen_hash<N>(input: [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input: [Field; N], _separator: u32) -> Field {}\n\npub fn hash_to_field<N>(_input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = _input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input: [u8; N], _message_size: u32) -> [u8; 32] {}\n\n","path":"std/hash.nr"},"28":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"}},"warnings":[]}