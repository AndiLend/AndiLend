{
  "address": "0xd0fB3F0440eef72547fB0cfd4082D248ab8dc86f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20USDTAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceDue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "interest",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "creditScore",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "pendingFeesCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct AndinLend.Loan",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "FinishLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceDue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "interest",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "creditScore",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "pendingFeesCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct AndinLend.Loan",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "GrantedLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "lender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceDue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "interest",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "creditScore",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "pendingFeesCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct AndinLend.Loan",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "PaidFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceDue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "interest",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "creditScore",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "pendingFeesCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct AndinLend.Loan",
          "name": "loan",
          "type": "tuple"
        }
      ],
      "name": "RequestedLoan",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAllLoans",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceDue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "interest",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "creditScore",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "pendingFeesCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            }
          ],
          "internalType": "struct AndinLend.Loan[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "getLenderByBorrowerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "getLoansByLend",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balanceDue",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "loanTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "interest",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "creditScore",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "pendingFeesCount",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "status",
              "type": "uint8"
            },
            {
              "internalType": "bytes",
              "name": "proof",
              "type": "bytes"
            }
          ],
          "internalType": "struct AndinLend.Loan[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "grantLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loans",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balanceDue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loanTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "interest",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "creditScore",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "pendingFeesCount",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "status",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lender",
          "type": "address"
        }
      ],
      "name": "payFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_loanTime",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_interest",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_pendingFeesCount",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_creditScore",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        }
      ],
      "name": "requestLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x044cebcc2b3fd38489eb68dd0d013bc2207db132966cb5ca3277012a16d6ba57",
  "receipt": {
    "to": null,
    "from": "0xf7c197dcB1910D790D52D5fcCEA927dFEDba8B33",
    "contractAddress": "0xd0fB3F0440eef72547fB0cfd4082D248ab8dc86f",
    "transactionIndex": 0,
    "gasUsed": "1425177",
    "logsBloom": "0x
    "blockHash": "0xc0e58e1905b93852975e8da8ef8cf2921dc6f209d0dccaa7bbdf874eabbf0d7b",
    "transactionHash": "0x044cebcc2b3fd38489eb68dd0d013bc2207db132966cb5ca3277012a16d6ba57",
    "logs": [],
    "blockNumber": 3392687,
    "cumulativeGasUsed": "1425177",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF9C619d863e7838730288C3fbc829658CaFc462c"
  ],
  "numDeployments": 1,
  "solcInputHash": "14402b615b742a7fe372629382335b0e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20USDTAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"creditScore\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pendingFeesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct AndinLend.Loan\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"FinishLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"creditScore\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pendingFeesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct AndinLend.Loan\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"GrantedLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"creditScore\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pendingFeesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct AndinLend.Loan\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"PaidFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"creditScore\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pendingFeesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct AndinLend.Loan\",\"name\":\"loan\",\"type\":\"tuple\"}],\"name\":\"RequestedLoan\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAllLoans\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"creditScore\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pendingFeesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"struct AndinLend.Loan[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"getLenderByBorrowerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"getLoansByLend\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"creditScore\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pendingFeesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"struct AndinLend.Loan[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"grantLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loans\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceDue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loanTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"interest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"creditScore\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"pendingFeesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lender\",\"type\":\"address\"}],\"name\":\"payFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_loanTime\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_interest\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_pendingFeesCount\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_creditScore\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"}],\"name\":\"requestLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"A smart contract that allows users to create loans requests and lenders to borrow USDTs Also returns the lender the borrowed money.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AndinLend.sol\":\"AndinLend\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"contracts/AndinLend.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\n/**\\n * A smart contract that allows users to create loans requests and lenders to borrow USDTs\\n * Also returns the lender the borrowed money.\\n */\\ncontract AndinLend {\\n\\tstruct Loan {\\n\\t\\tuint amount;\\n\\t\\tuint balanceDue;\\n\\t\\tuint loanTime;\\n\\t\\tuint fee;\\n\\t\\tuint8 interest;\\n\\t\\tuint8 creditScore;\\n\\t\\tuint8 pendingFeesCount;\\n\\t\\tuint8 status;\\n\\t\\tbytes proof;\\n\\t}\\n\\n\\tmapping(address => Loan) public loans;\\n\\tmapping(address => address) private borrowerToLender;\\n\\tmapping(address => address[]) private lenderToBorrowers;\\n\\taddress[] private borrowersRegister;\\n\\n\\tevent RequestedLoan(address borrower, Loan loan);\\n\\n\\tevent GrantedLoan(address borrower, address lender, Loan loan);\\n\\n\\tevent PaidFee(address borrower, address lender, Loan loan);\\n\\n\\tevent FinishLoan(address borrower, address lender, Loan loan);\\n\\n\\tIERC20 private erc20USDT;\\n\\n\\tconstructor(address _erc20USDTAddress) {\\n\\t\\terc20USDT = IERC20(_erc20USDTAddress);\\n\\t}\\n\\n\\tfunction requestLoan(\\n\\t\\tuint _amount,\\n\\t\\tuint _loanTime,\\n\\t\\tuint8 _interest,\\n\\t\\tuint8 _pendingFeesCount,\\n\\t\\tuint8 _creditScore,\\n\\t\\tbytes memory _proof\\n\\t) external {\\n\\t\\trequire(\\n\\t\\t\\tloans[msg.sender].loanTime == 0 || loans[msg.sender].status == 2,\\n\\t\\t\\t\\\"Each user can only have one active loan.\\\"\\n\\t\\t);\\n\\t\\tuint dueWeeks = _loanTime / 604800;\\n\\t\\tuint balanceDue = ((_interest * dueWeeks * _amount) / 100) + _amount;\\n\\t\\tuint fee = balanceDue / _pendingFeesCount;\\n\\t\\tLoan memory newLoanRequest = Loan(\\n\\t\\t\\t_amount,\\n\\t\\t\\tbalanceDue,\\n\\t\\t\\t_loanTime,\\n\\t\\t\\tfee,\\n\\t\\t\\t_interest,\\n\\t\\t\\t_creditScore,\\n\\t\\t\\t_pendingFeesCount,\\n\\t\\t\\tuint8(0),\\n\\t\\t\\t_proof\\n\\t\\t);\\n\\t\\tif (loans[msg.sender].status != 2) {\\n\\t\\t\\tborrowersRegister.push(msg.sender);\\n\\t\\t}\\n\\t\\tloans[msg.sender] = newLoanRequest;\\n\\t\\temit RequestedLoan(msg.sender, newLoanRequest);\\n\\t}\\n\\n\\tfunction grantLoan(address _borrower) public {\\n\\t\\trequire(\\n\\t\\t\\tloans[_borrower].loanTime != 0,\\n\\t\\t\\t\\\"The client does not have a loan requirement\\\"\\n\\t\\t);\\n\\t\\trequire(loans[_borrower].status == 0, \\\"The loan is not pending\\\");\\n\\t\\trequire(\\n\\t\\t\\terc20USDT.balanceOf(msg.sender) > loans[_borrower].amount,\\n\\t\\t\\t\\\"Insufficient USDT balance.\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\terc20USDT.allowance(msg.sender, address(this)) >=\\n\\t\\t\\t\\tloans[_borrower].amount,\\n\\t\\t\\t\\\"Insufficient USDT balance allowance.\\\"\\n\\t\\t);\\n\\n\\t\\terc20USDT.transferFrom(msg.sender, _borrower, loans[_borrower].amount);\\n\\t\\tloans[_borrower].status = 1;\\n\\t\\tborrowerToLender[_borrower] = msg.sender;\\n\\t\\tlenderToBorrowers[msg.sender].push(_borrower);\\n\\t\\temit GrantedLoan(_borrower, msg.sender, loans[_borrower]);\\n\\t}\\n\\n\\tfunction payFee(address _lender) external {\\n\\t\\trequire(\\n\\t\\t\\tloans[msg.sender].loanTime != 0,\\n\\t\\t\\t\\\"Client does not have an active loan.\\\"\\n\\t\\t);\\n\\t\\trequire(loans[msg.sender].status == 1, \\\"The loan is not active.\\\");\\n\\t\\trequire(\\n\\t\\t\\terc20USDT.balanceOf(msg.sender) > loans[msg.sender].fee,\\n\\t\\t\\t\\\"Insufficient USDT balance.\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tborrowerToLender[msg.sender] == _lender,\\n\\t\\t\\t\\\"The address is not the lender of this loan.\\\"\\n\\t\\t);\\n\\n\\t\\terc20USDT.transferFrom(msg.sender, _lender, loans[msg.sender].fee);\\n\\t\\tloans[msg.sender].pendingFeesCount =\\n\\t\\t\\tloans[msg.sender].pendingFeesCount -\\n\\t\\t\\t1;\\n\\t\\temit PaidFee(msg.sender, _lender, loans[msg.sender]);\\n\\t\\tif (loans[msg.sender].pendingFeesCount == 0) {\\n\\t\\t\\tfinishLoan(_lender);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction finishLoan(address _lender) private {\\n\\t\\tloans[msg.sender].status = 2;\\n\\t\\temit FinishLoan(msg.sender, _lender, loans[msg.sender]);\\n\\t}\\n\\n\\tfunction getLenderByBorrowerAddress(\\n\\t\\taddress _borrower\\n\\t) external view returns (address) {\\n\\t\\treturn borrowerToLender[_borrower];\\n\\t}\\n\\n\\tfunction getLoansByLend(\\n\\t\\taddress _lender\\n\\t) external view returns (Loan[] memory) {\\n\\t\\tuint loansByLendCount = lenderToBorrowers[_lender].length;\\n\\t\\tLoan[] memory loansByLend = new Loan[](loansByLendCount);\\n\\t\\taddress[] memory borrowers = lenderToBorrowers[_lender];\\n\\n\\t\\tfor (uint i = 0; i < borrowers.length; i++) {\\n\\t\\t\\taddress borrower = borrowers[i];\\n\\t\\t\\tloansByLend[i] = loans[borrower];\\n\\t\\t}\\n\\n\\t\\treturn loansByLend;\\n\\t}\\n\\n\\tfunction getAllLoans()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (Loan[] memory, address[] memory)\\n\\t{\\n\\t\\tuint addressesCount = borrowersRegister.length;\\n\\t\\tLoan[] memory allLoans = new Loan[](addressesCount);\\n\\n\\t\\tfor (uint i = 0; i < addressesCount; i++) {\\n\\t\\t\\taddress borrower = borrowersRegister[i];\\n\\t\\t\\tallLoans[i] = loans[borrower];\\n\\t\\t}\\n\\n\\t\\treturn (allLoans, borrowersRegister);\\n\\t}\\n}\\n\",\"keccak256\":\"0x2b07b2c35685c3446823d6ed8b5ce9a634ec33a9b8a434cafb7aa6d5a9480f33\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806373b4086b1161005b57806373b4086b146100d35780638611610d146100fb578063a5bfd16a1461013f578063e3ae469a1461015557600080fd5b80634bcf17df1461008257806364ec0309146100975780636f5a955b146100c0575b600080fd5b6100956100903660046111a0565b610168565b005b6100aa6100a5366004611295565b6103f6565b6040516100b791906113fa565b60405180910390f35b6100956100ce366004611295565b61064e565b6100e66100e1366004611295565b6109c7565b6040516100b79998979695949392919061140d565b610127610109366004611295565b6001600160a01b039081166000908152600160205260409020541690565b6040516001600160a01b0390911681526020016100b7565b610147610aab565b6040516100b792919061146e565b610095610163366004611295565b610cde565b3360009081526020819052604090206002015415806101a35750336000908152602081905260409020600401546301000000900460ff166002145b6102055760405162461bcd60e51b815260206004820152602860248201527f4561636820757365722063616e206f6e6c792068617665206f6e6520616374696044820152673b32903637b0b71760c11b60648201526084015b60405180910390fd5b600061021462093a80876114d7565b90506000876064816102298560ff8b166114f9565b61023391906114f9565b61023d91906114d7565b6102479190611516565b9050600061025860ff8716836114d7565b60408051610120810182528b815260208082018690528183018c90526060820184905260ff8b8116608084015289811660a08401528a811660c0840152600060e0840181905261010084018a9052338152918290529290206004015492935091630100000090041660021461030a57600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b031916331790555b33600090815260208181526040918290208351815590830151600182015590820151600282015560608201516003820155608082015160048201805460a085015160c086015160e087015160ff95861661ffff199094169390931761010092861683021763ffff00001916620100009186169190910263ff0000001916176301000000949092169390930217905582015182919060058201906103ad90826115b4565b509050507fed6cbb255b9f23399f9a61e72eff24b1e74d8ce8fbb9651fbd711d298df0100b33826040516103e2929190611674565b60405180910390a150505050505050505050565b6001600160a01b0381166000908152600260205260408120546060918167ffffffffffffffff81111561042b5761042b61118a565b60405190808252806020026020018201604052801561046457816020015b61045161111c565b8152602001906001900390816104495790505b506001600160a01b0385166000908152600260209081526040808320805482518185028101850190935280835294955092939092918301828280156104d257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104b4575b5050505050905060005b81518110156106445760008282815181106104f9576104f96116a0565b6020908102919091018101516001600160a01b03811660009081528083526040908190208151610120810183528154815260018201549481019490945260028101549184019190915260038101546060840152600481015460ff8082166080860152610100808304821660a0870152620100008304821660c087015263010000009092041660e08501526005820180549395509192908401919061059c90611529565b80601f01602080910402602001604051908101604052809291908181526020018280546105c890611529565b80156106155780601f106105ea57610100808354040283529160200191610615565b820191906000526020600020905b8154815290600101906020018083116105f857829003601f168201915b505050505081525050848381518110610630576106306116a0565b6020908102919091010152506001016104dc565b5090949350505050565b3360009081526020819052604081206002015490036106bb5760405162461bcd60e51b8152602060048201526024808201527f436c69656e7420646f6573206e6f74206861766520616e20616374697665206c60448201526337b0b71760e11b60648201526084016101fc565b336000908152602081905260409020600401546301000000900460ff166001146107275760405162461bcd60e51b815260206004820152601760248201527f546865206c6f616e206973206e6f74206163746976652e00000000000000000060448201526064016101fc565b3360008181526020819052604090819020600301546004805492516370a0823160e01b815290810193909352916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa91906116b6565b116107f75760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420555344542062616c616e63652e00000000000060448201526064016101fc565b336000908152600160205260409020546001600160a01b038281169116146108755760405162461bcd60e51b815260206004820152602b60248201527f5468652061646472657373206973206e6f7420746865206c656e646572206f6660448201526a103a3434b9903637b0b71760a91b60648201526084016101fc565b6004805433600081815260208190526040908190206003015490516323b872dd60e01b8152938401919091526001600160a01b038481166024850152604484019190915216906323b872dd906064016020604051808303816000875af11580156108e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090791906116cf565b50336000908152602081905260409020600401546109309060019062010000900460ff166116f1565b336000818152602081905260409081902060048101805460ff95909516620100000262ff00001990951694909417909355517fda0a87ecc5108755b9c2c66d6069661068c3a4c0ef954009d09ec1c2bd010d97926109919291859190611787565b60405180910390a13360009081526020819052604081206004015462010000900460ff1690036109c4576109c4816110c4565b50565b600060208190529081526040902080546001820154600283015460038401546004850154600586018054959694959394929360ff808416946101008504821694620100008104831694630100000090910490921692909190610a2890611529565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5490611529565b8015610aa15780601f10610a7657610100808354040283529160200191610aa1565b820191906000526020600020905b815481529060010190602001808311610a8457829003601f168201915b5050505050905089565b600354606090819060008167ffffffffffffffff811115610ace57610ace61118a565b604051908082528060200260200182016040528015610b0757816020015b610af461111c565b815260200190600190039081610aec5790505b50905060005b82811015610c7457600060038281548110610b2a57610b2a6116a0565b60009182526020808320909101546001600160a01b03168083528282526040928390208351610120810185528154815260018201549381019390935260028101549383019390935260038301546060830152600483015460ff8082166080850152610100808304821660a0860152620100008304821660c086015263010000009092041660e084015260058401805492955092939290840191610bcc90611529565b80601f0160208091040260200160405190810160405280929190818152602001828054610bf890611529565b8015610c455780601f10610c1a57610100808354040283529160200191610c45565b820191906000526020600020905b815481529060010190602001808311610c2857829003601f168201915b505050505081525050838381518110610c6057610c606116a0565b602090810291909101015250600101610b0d565b5080600380805480602002602001604051908101604052809291908181526020018280548015610ccd57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610caf575b505050505090509350935050509091565b6001600160a01b0381166000908152602081905260408120600201549003610d5c5760405162461bcd60e51b815260206004820152602b60248201527f54686520636c69656e7420646f6573206e6f7420686176652061206c6f616e2060448201526a1c995c5d5a5c995b595b9d60aa1b60648201526084016101fc565b6001600160a01b0381166000908152602081905260409020600401546301000000900460ff1615610dcf5760405162461bcd60e51b815260206004820152601760248201527f546865206c6f616e206973206e6f742070656e64696e6700000000000000000060448201526064016101fc565b6001600160a01b0381811660009081526020819052604090819020546004805492516370a0823160e01b81523391810191909152909291909116906370a0823190602401602060405180830381865afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5491906116b6565b11610ea15760405162461bcd60e51b815260206004820152601a60248201527f496e73756666696369656e7420555344542062616c616e63652e00000000000060448201526064016101fc565b6001600160a01b038181166000908152602081905260409081902054600480549251636eb1769f60e11b815233918101919091523060248201529092919091169063dd62ed3e90604401602060405180830381865afa158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c91906116b6565b1015610f865760405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e7420555344542062616c616e636520616c6c6f77616044820152633731b29760e11b60648201526084016101fc565b600480546001600160a01b03838116600081815260208190526040908190205490516323b872dd60e01b815233958101959095526024850191909152604484015216906323b872dd906064016020604051808303816000875af1158015610ff1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101591906116cf565b506001600160a01b03811660008181526020818152604080832060048101805463ff00000019166301000000179055600180845282852080546001600160a01b031990811633908117909255818752600286528487208054938401815587528587209092018054909216871790915594845292909152517fdd0d253b00b14e86c05699593e408734dd7a39002898d3edbba569985f39def8926110b9928592611787565b60405180910390a150565b336000818152602081905260409081902060048101805463ff0000001916630200000017905590517fb195f49875a9a50479dcd4a380b8c01e95248a826053a333c138adb7cec847b7926110b9929091859190611787565b60405180610120016040528060008152602001600081526020016000815260200160008152602001600060ff168152602001600060ff168152602001600060ff168152602001600060ff168152602001606081525090565b803560ff8116811461118557600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c087890312156111b957600080fd5b86359550602087013594506111d060408801611174565b93506111de60608801611174565b92506111ec60808801611174565b915060a087013567ffffffffffffffff8082111561120957600080fd5b818901915089601f83011261121d57600080fd5b81358181111561122f5761122f61118a565b604051601f8201601f19908116603f011681019083821181831017156112575761125761118a565b816040528281528c602084870101111561127057600080fd5b8260208601602083013760006020848301015280955050505050509295509295509295565b6000602082840312156112a757600080fd5b81356001600160a01b03811681146112be57600080fd5b9392505050565b6000815180845260005b818110156112eb576020818501810151868301820152016112cf565b506000602082860101526020601f19601f83011685010191505092915050565b60006101208251845260208301516020850152604083015160408501526060830151606085015260ff608084015116608085015260a083015161135360a086018260ff169052565b5060c083015161136860c086018260ff169052565b5060e083015161137d60e086018260ff169052565b50610100808401518282870152611396838701826112c5565b9695505050505050565b60008282518085526020808601955060208260051b8401016020860160005b848110156113ed57601f198684030189526113db83835161130b565b988401989250908301906001016113bf565b5090979650505050505050565b6020815260006112be60208301846113a0565b60006101208b83528a602084015289604084015288606084015260ff8816608084015260ff871660a084015260ff861660c084015260ff851660e08401528061010084015261145e818401856112c5565b9c9b505050505050505050505050565b60408152600061148160408301856113a0565b82810360208481019190915284518083528582019282019060005b818110156113ed5784516001600160a01b03168352938301939183019160010161149c565b634e487b7160e01b600052601160045260246000fd5b6000826114f457634e487b7160e01b600052601260045260246000fd5b500490565b8082028115828204841417611510576115106114c1565b92915050565b80820180821115611510576115106114c1565b600181811c9082168061153d57607f821691505b60208210810361155d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156115af576000816000526020600020601f850160051c8101602086101561158c5750805b601f850160051c820191505b818110156115ab57828155600101611598565b5050505b505050565b815167ffffffffffffffff8111156115ce576115ce61118a565b6115e2816115dc8454611529565b84611563565b602080601f83116001811461161757600084156115ff5750858301515b600019600386901b1c1916600185901b1785556115ab565b600085815260208120601f198616915b8281101561164657888601518255948401946001909101908401611627565b50858210156116645787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b03831681526040602082018190526000906116989083018461130b565b949350505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156116c857600080fd5b5051919050565b6000602082840312156116e157600080fd5b815180151581146112be57600080fd5b60ff8281168282160390811115611510576115106114c1565b6000815461171781611529565b808552602060018381168015611734576001811461174e5761177c565b60ff1985168884015283151560051b88018301955061177c565b866000528260002060005b858110156117745781548a8201860152908301908401611759565b890184019650505b505050505092915050565b6001600160a01b0384811682528316602082015260606040820181905282549082015260018201546080820152600282015460a0820152600382015460c0820152600482015460ff811660e0830152600090600881901c60ff166101008401526101206117fe81850160ff8460101c1660ff169052565b601882901c60ff166101408501526101608401525061182461018083016005850161170a565b9594505050505056fea2646970667358221220be7595e29266b6d4cecde14dc6b096afe2d9d51f08de9b074bdd6c2cd06053b964736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "A smart contract that allows users to create loans requests and lenders to borrow USDTs Also returns the lender the borrowed money.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 142,
        "contract": "contracts/AndinLend.sol:AndinLend",
        "label": "loans",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(Loan)137_storage)"
      },
      {
        "astId": 146,
        "contract": "contracts/AndinLend.sol:AndinLend",
        "label": "borrowerToLender",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 151,
        "contract": "contracts/AndinLend.sol:AndinLend",
        "label": "lenderToBorrowers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 154,
        "contract": "contracts/AndinLend.sol:AndinLend",
        "label": "borrowersRegister",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/AndinLend.sol:AndinLend",
        "label": "erc20USDT",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)77"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_struct(Loan)137_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AndinLend.Loan)",
        "numberOfBytes": "32",
        "value": "t_struct(Loan)137_storage"
      },
      "t_struct(Loan)137_storage": {
        "encoding": "inplace",
        "label": "struct AndinLend.Loan",
        "members": [
          {
            "astId": 120,
            "contract": "contracts/AndinLend.sol:AndinLend",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 122,
            "contract": "contracts/AndinLend.sol:AndinLend",
            "label": "balanceDue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 124,
            "contract": "contracts/AndinLend.sol:AndinLend",
            "label": "loanTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 126,
            "contract": "contracts/AndinLend.sol:AndinLend",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 128,
            "contract": "contracts/AndinLend.sol:AndinLend",
            "label": "interest",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 130,
            "contract": "contracts/AndinLend.sol:AndinLend",
            "label": "creditScore",
            "offset": 1,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 132,
            "contract": "contracts/AndinLend.sol:AndinLend",
            "label": "pendingFeesCount",
            "offset": 2,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 134,
            "contract": "contracts/AndinLend.sol:AndinLend",
            "label": "status",
            "offset": 3,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 136,
            "contract": "contracts/AndinLend.sol:AndinLend",
            "label": "proof",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}